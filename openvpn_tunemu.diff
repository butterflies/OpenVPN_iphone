diff -Naur openvpn-2.1_rc19/configure.ac openvpn-2.1_rc19-tunemu/configure.ac
--- openvpn-2.1_rc19/configure.ac	2009-06-09 03:59:49.000000000 -0700
+++ openvpn-2.1_rc19-tunemu/configure.ac	2009-08-14 18:36:04.000000000 -0700
@@ -194,6 +194,12 @@
    [STRICT_OPTIONS="no"]
 )
 
+AC_ARG_ENABLE(tunemu,
+   [ --enable-tunemu Enable tunemu tun device emulation (for iPhone -- will also include libpcap)],
+   [TUNEMU="$enableval"],
+   [TUNEMU="no"]
+)
+
 AC_ARG_WITH(ssl-headers,
    [  --with-ssl-headers=DIR  Crypto/SSL Include files location],
    [CS_HDR_DIR="$withval"]
@@ -227,6 +233,17 @@
    [LDFLAGS="$LDFLAGS -L$withval"] 
 )
 
+AC_ARG_WITH(pcap-headers,
+   [  --with-pcap-headers=DIR pcap Include files location],
+   [PCAP_HDR_DIR="$withval"]
+   [CPPFLAGS="$CPPFLAGS -I$withval"]
+)
+
+AC_ARG_WITH(pcap-lib,
+   [  --with-pcap-lib=DIR   pcap Library location],
+   [LDFLAGS="$LDFLAGS -L$withval"]
+)
+
 AC_ARG_WITH(ifconfig-path,
    [  --with-ifconfig-path=PATH   Path to ifconfig tool],
    [IFCONFIG="$withval"],
@@ -674,6 +691,24 @@
 fi
 
 dnl
+dnl check for PCAP library
+dnl
+
+if test "$TUNEMU" = "yes"; then
+  AC_CHECKING([for pcap Library and Header files])
+  AC_CHECK_HEADER(pcap.h,
+      [AC_CHECK_LIB(pcap, pcap_lookupdev,
+         [
+	      AC_DEFINE(USE_TUNEMU, 1, [Enable tunemu/pcap capability])
+	      OPENVPN_ADD_LIBS(-lpcap)
+	 ],
+	 [AC_MSG_ERROR([pcap library not found.])]
+       )],
+       [AC_MSG_ERROR([pcap library headers not found.])]
+   )
+fi
+
+dnl
 dnl check for OpenSSL-crypto library
 dnl
 
diff -Naur openvpn-2.1_rc19/Makefile.am openvpn-2.1_rc19-tunemu/Makefile.am
--- openvpn-2.1_rc19/Makefile.am	2009-05-30 14:34:12.000000000 -0700
+++ openvpn-2.1_rc19-tunemu/Makefile.am	2009-08-14 18:36:04.000000000 -0700
@@ -137,7 +137,8 @@
 	thread.c thread.h \
 	tun.c tun.h \
 	win32.h win32.c \
-	cryptoapi.h cryptoapi.c
+	cryptoapi.h cryptoapi.c \
+	tunemu.h tunemu.c
 
 
 dist-hook:
diff -Naur openvpn-2.1_rc19/tun.c openvpn-2.1_rc19-tunemu/tun.c
--- openvpn-2.1_rc19/tun.c	2009-05-30 14:34:13.000000000 -0700
+++ openvpn-2.1_rc19-tunemu/tun.c	2009-08-14 18:25:21.000000000 -0700
@@ -43,6 +43,10 @@
 
 #include "memdbg.h"
 
+#ifdef USE_TUNEMU
+#include "tunemu.h"
+#endif
+
 #ifdef WIN32
 
 /* #define SIMULATE_DHCP_FAILED */       /* simulate bad DHCP negotiation */
@@ -1000,6 +1004,19 @@
 	   */
 	  if (dynamic && !has_digit((unsigned char *)dev))
 	    {
+#ifdef USE_TUNEMU
+			if (strncmp(dev, "tun", 3) != 0)
+				msg (M_ERR, "Device type not supported by tunemu: %s", dev);
+
+			dynamic_name[0] = 0;
+			if ((tt->fd = tunemu_open(dynamic_name)) > 0)
+			{
+				dynamic_opened = true;
+				openvpn_snprintf(tunname, sizeof(tunname), "tunemu:/%s", dynamic_name);
+			}
+			else
+				msg(M_WARN, "tunemu: %s", tunemu_error);
+#else
 	      int i;
 	      for (i = 0; i < 256; ++i)
 		{
@@ -1014,6 +1031,7 @@
 		    }
 		  msg (D_READ_WRITE | M_ERRNO, "Tried opening %s (failed)", tunname);
 		}
+#endif
 	      if (!dynamic_opened)
 		msg (M_FATAL, "Cannot allocate TUN/TAP dev dynamically");
 	    }
@@ -1028,8 +1046,12 @@
 
       if (!dynamic_opened)
 	{
+#ifdef USE_TUNEMU
+	    msg (M_ERR, "Cannot open TUN/TAP dev %s: not supported by tunemu", tunname);
+#else
 	  if ((tt->fd = open (tunname, O_RDWR)) < 0)
 	    msg (M_ERR, "Cannot open TUN/TAP dev %s", tunname);
+#endif
 	}
 
       set_nonblock (tt->fd);
@@ -1045,7 +1067,11 @@
 close_tun_generic (struct tuntap *tt)
 {
   if (tt->fd >= 0)
+#ifdef USE_TUNEMU
+    tunemu_close(tt->fd);
+#else	
     close (tt->fd);
+#endif
   if (tt->actual_name)
     free (tt->actual_name);
   clear_tuntap (tt);
@@ -4361,13 +4387,21 @@
 int
 write_tun (struct tuntap* tt, uint8_t *buf, int len)
 {
+#ifdef USE_TUNEMU
+  return tunemu_write (tt->fd, buf, len);
+#else
   return write (tt->fd, buf, len);
+#endif
 }
 
 int
 read_tun (struct tuntap* tt, uint8_t *buf, int len)
 {
+#ifdef USE_TUNEMU
+  return tunemu_read (tt->fd, buf, len);
+#else	
   return read (tt->fd, buf, len);
+#endif
 }
 
 #endif
diff -Naur openvpn-2.1_rc19/tunemu.c openvpn-2.1_rc19-tunemu/tunemu.c
--- openvpn-2.1_rc19/tunemu.c	1969-12-31 16:00:00.000000000 -0800
+++ openvpn-2.1_rc19-tunemu/tunemu.c	2009-08-03 10:36:37.000000000 -0700
@@ -0,0 +1,386 @@
+/*
+ *  tunemu - Tun device emulation for Darwin
+ *  Copyright (C) 2009 Friedrich Sch√∂ller <friedrich.schoeller@gmail.com>
+ *  
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *  
+ */
+
+#include "tunemu.h"
+
+#include <sys/socket.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <memory.h>
+#include <util.h>
+#include <pcap.h>
+#include <stdarg.h>
+#include <errno.h>
+#include <stdint.h>
+#include <stdint.h>
+#include <ctype.h>
+#include <fcntl.h>
+
+#define PPPPROTO_CTL 1
+
+#define PPP_IP		0x21
+#define PPP_IPV6	0x57
+
+#define SC_LOOP_TRAFFIC 0x00000200
+
+#define PPPIOCNEWUNIT	_IOWR('t', 62, int)
+#define	PPPIOCSFLAGS	_IOW('t', 89, int)
+#define PPPIOCSNPMODE	_IOW('t', 75, struct npioctl)
+#define PPPIOCATTCHAN	_IOW('t', 56, int)
+#define PPPIOCGCHAN		_IOR('t', 55, int)
+#define PPPIOCCONNECT	_IOW('t', 58, int)
+#define	PPPIOCGUNIT		_IOR('t', 86, int)
+
+struct sockaddr_ppp
+{
+	u_int8_t ppp_len;
+	u_int8_t ppp_family;
+	u_int16_t ppp_proto;
+	u_int32_t ppp_cookie;
+};
+
+enum NPmode
+{
+	NPMODE_PASS,
+    NPMODE_DROP,
+    NPMODE_ERROR,
+    NPMODE_QUEUE
+};
+
+struct npioctl
+{
+	int protocol;
+	enum NPmode mode;
+};
+
+#define PPP_KEXT_PATH "/System/Library/Extensions/PPP.kext"
+
+#define ERROR_BUFFER_SIZE 1024
+
+char tunemu_error[ERROR_BUFFER_SIZE];
+
+static int pcap_use_count = 0;
+static pcap_t *pcap = NULL;
+
+static int data_buffer_length = 0;
+static char *data_buffer = NULL;
+
+static void tun_error(char *format, ...)
+{
+	va_list vl;
+	va_start(vl, format);
+	vsnprintf(tunemu_error, ERROR_BUFFER_SIZE, format, vl);
+	va_end(vl);
+}
+
+static void tun_noerror()
+{
+	*tunemu_error = 0;
+}
+
+static void closeall()
+{
+    int fd = getdtablesize();
+	while (fd--)
+		close(fd);
+
+    open("/dev/null", O_RDWR, 0);
+    dup(0);
+    dup(0);
+}
+
+static int ppp_load_kext()
+{
+	int pid = fork();
+	if (pid < 0)
+	{
+		tun_error("fork for ppp kext: %s", strerror(errno));
+		return -1;
+	}
+
+	if (pid == 0)
+	{
+		closeall();
+		execle("/sbin/kextload", "kextload", PPP_KEXT_PATH, NULL, NULL);
+		exit(1);
+	}
+
+	int status;
+	while (waitpid(pid, &status, 0) < 0)
+	{
+		if (errno == EINTR)
+			continue;
+
+		tun_error("waitpid for ppp kext: %s", strerror(errno));
+		return -1;
+	}
+
+	if (WEXITSTATUS(status) != 0)
+	{
+		tun_error("could not load ppp kext \"%s\"", PPP_KEXT_PATH);
+		return -1;
+	}
+
+	tun_noerror();
+	return 0;
+}
+
+static int ppp_new_instance()
+{
+	// create ppp socket
+    int ppp_sockfd = socket(PF_PPP, SOCK_RAW, PPPPROTO_CTL);
+    if (ppp_sockfd < 0)
+	{
+		if (ppp_load_kext() < 0)
+			return -1;
+
+		ppp_sockfd = socket(PF_PPP, SOCK_RAW, PPPPROTO_CTL);
+		if (ppp_sockfd < 0)
+		{
+			tun_error("creating ppp socket: %s", strerror(errno));
+			return -1;
+		}
+	}
+
+	// connect to ppp procotol
+    struct sockaddr_ppp pppaddr;
+    pppaddr.ppp_len = sizeof(struct sockaddr_ppp);
+    pppaddr.ppp_family = AF_PPP;
+    pppaddr.ppp_proto = PPPPROTO_CTL;
+    pppaddr.ppp_cookie = 0;
+    if (connect(ppp_sockfd, (struct sockaddr *)&pppaddr, sizeof(struct sockaddr_ppp)) < 0)
+	{
+		tun_error("connecting ppp socket: %s", strerror(errno));
+		close(ppp_sockfd);
+		return -1;
+    }
+
+	tun_noerror();
+	return ppp_sockfd;
+}
+
+static int ppp_new_unit(int *unit_number)
+{
+	int fd = ppp_new_instance();
+	if (fd < 0)
+		return -1;
+
+	// create ppp unit
+	if (ioctl(fd, PPPIOCNEWUNIT, unit_number) < 0)
+	{
+		tun_error("creating ppp unit: %s", strerror(errno));
+		close(fd);
+		return -1;
+    }
+
+	tun_noerror();
+	return fd;
+}
+
+static int ppp_setup_unit(int unit_fd)
+{
+	// send traffic to program
+	int flags = SC_LOOP_TRAFFIC;
+	if (ioctl(unit_fd, PPPIOCSFLAGS, &flags) < 0)
+	{
+		tun_error("setting ppp loopback mode: %s", strerror(errno));
+		return -1;
+    }
+
+	// allow packets
+	struct npioctl npi;
+	npi.protocol = PPP_IP;
+	npi.mode = NPMODE_PASS;
+	if (ioctl(unit_fd, PPPIOCSNPMODE, &npi) < 0)
+	{
+		tun_error("starting ppp unit: %s", strerror(errno));
+		return -1;
+	}
+
+	tun_noerror();
+	return 0;
+}
+
+static int open_pcap()
+{
+	if (pcap != NULL)
+	{
+		pcap_use_count++;
+		return 0;
+	}
+
+	char errbuf[PCAP_ERRBUF_SIZE];
+	pcap = pcap_open_live("lo0", BUFSIZ, 0, 1, errbuf);
+	pcap_use_count = 1;
+
+	if (pcap == NULL)
+	{
+		tun_error("opening pcap: %s", errbuf);
+		return -1;
+	}
+
+	tun_noerror();
+	return 0;
+}
+
+static void close_pcap()
+{
+	if (pcap == NULL)
+		return;
+
+	pcap_use_count--;
+	if (pcap_use_count == 0)
+	{
+		pcap_close(pcap);
+		pcap = NULL;
+	}
+}
+
+static void allocate_data_buffer(int size)
+{
+	if (data_buffer_length < size)
+	{
+		free(data_buffer);
+		data_buffer_length = size;
+		data_buffer = malloc(data_buffer_length);
+	}
+}
+
+static void make_device_name(tunemu_device device, int unit_number)
+{
+	snprintf(device, sizeof(tunemu_device), "ppp%d", unit_number);
+}
+
+static int check_device_name(tunemu_device device)
+{
+	if (strlen(device) < 4)
+		return -1;
+
+	int unit_number = atoi(device + 3);
+	if (unit_number < 0 || unit_number > 999)
+		return -1;
+
+	tunemu_device compare;
+	make_device_name(compare, unit_number);
+
+	if (strcmp(device, compare) != 0)
+		return -1;
+
+	return 0;
+}
+
+int tunemu_open(tunemu_device device)
+{
+	int ppp_unit_number = -1;
+	if (device[0] != 0)
+	{
+		if (check_device_name(device) < 0)
+		{
+			tun_error("invalid device name \"%s\"", device);
+			return -1;
+		}
+
+		ppp_unit_number = atoi(device + 3);
+	}
+
+	int ppp_unit_fd = ppp_new_unit(&ppp_unit_number);
+	if (ppp_unit_fd < 0)
+		return -1;
+
+	if (ppp_setup_unit(ppp_unit_fd) < 0)
+	{
+		close(ppp_unit_fd);
+		return -1;
+	}
+
+	if (open_pcap() < 0)
+	{
+		close(ppp_unit_fd);
+		return -1;
+	}
+
+	make_device_name(device, ppp_unit_number);
+
+	return ppp_unit_fd;
+}
+
+int tunemu_close(int ppp_sockfd)
+{
+	int ret = close(ppp_sockfd);
+
+	if (ret == 0)
+		close_pcap();
+
+	return ret;
+}
+
+int tunemu_read(int ppp_sockfd, char *buffer, int length)
+{
+	allocate_data_buffer(length + 2);
+
+	length = read(ppp_sockfd, data_buffer, length + 2);
+	if (length < 0)
+	{
+		tun_error("reading packet: %s", strerror(errno));
+		return length;
+	}
+	tun_noerror();
+
+	length -= 2;
+	if (length < 0)
+		return 0;
+
+	memcpy(buffer, data_buffer + 2, length);
+
+	return length;
+}
+
+int tunemu_write(int ppp_sockfd, char *buffer, int length)
+{
+	allocate_data_buffer(length + 4);
+
+	data_buffer[0] = 0x02;
+	data_buffer[1] = 0x00;
+	data_buffer[2] = 0x00;
+	data_buffer[3] = 0x00;
+
+	memcpy(data_buffer + 4, buffer, length);
+
+	if (pcap == NULL)
+	{
+		tun_error("pcap not open");
+		return -1;
+	}
+
+	length = pcap_inject(pcap, data_buffer, length + 4);
+	if (length < 0)
+	{
+		tun_error("injecting packet: %s", pcap_geterr(pcap));
+		return length;
+	}
+	tun_noerror();
+
+	length -= 4;
+	if (length < 0)
+		return 0;
+
+	return length;
+}
diff -Naur openvpn-2.1_rc19/tunemu.h openvpn-2.1_rc19-tunemu/tunemu.h
--- openvpn-2.1_rc19/tunemu.h	1969-12-31 16:00:00.000000000 -0800
+++ openvpn-2.1_rc19-tunemu/tunemu.h	2009-08-03 10:36:37.000000000 -0700
@@ -0,0 +1,32 @@
+/*
+ *  tunemu - Tun device emulation for Darwin
+ *  Copyright (C) 2009 Friedrich Sch√∂ller <friedrich.schoeller@gmail.com>
+ *  
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *  
+ */
+
+#ifndef TUNEMU_H
+#define TUNEMU_H
+
+typedef char tunemu_device[7];
+
+extern char tunemu_error[];
+
+int tunemu_open(tunemu_device dev);
+int tunemu_close(int fd);
+int tunemu_read(int fd, char *buffer, int length);
+int tunemu_write(int fd, char *buffer, int length);
+
+#endif
diff -Naur openvpn-2.1_rc19/version.m4 openvpn-2.1_rc19-tunemu/version.m4
--- openvpn-2.1_rc19/version.m4	2009-07-16 02:13:42.000000000 -0700
+++ openvpn-2.1_rc19-tunemu/version.m4	2009-08-14 18:38:49.000000000 -0700
@@ -1,5 +1,5 @@
 dnl define the OpenVPN version
-define(PRODUCT_VERSION,[2.1_rc19])
+define(PRODUCT_VERSION,[2.1_rc19_jfx])
 dnl define the TAP version
 define(PRODUCT_TAP_ID,[tap0901])
 define(PRODUCT_TAP_WIN32_MIN_MAJOR,[9])
